# -*- coding: utf-8 -*-
"""EyeAnalysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u-mE8JBOuAJN8xcHktejLkoF3S6mmpXV

Importing
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from IPython.display import display, HTML
import matplotlib.image as mpimg

#Reading data
data1 = pd.read_csv('cleaned_Participant_01.csv')
data2 = pd.read_csv('cleaned_Participant_02.csv')
data3 = pd.read_csv('cleaned_Participant_03.csv')
data4 = pd.read_csv('cleaned_Participant_04.csv')
data5 = pd.read_csv('cleaned_Participant_05.csv')

"""Functions"""

def add_time_seconds(data):
    data['timeSeconds'] = (data['timestamp (us)'] - data['timestamp (us)'].iloc[0]) / 1000000

def add_time_between_points(data):
    data['time_between_points_seconds'] = data['timeSeconds'].diff()
    data['time_between_points_seconds'].iloc[0] = 0


def invert_y(data, y_max):
    data['y'] = y_max - data['y']

def remove_na(data):
    data = data.dropna()

def fixation_algorithm(gaze_points, threshold):
    fixations = []
    current_fixation = [gaze_points[0]]

    for i in range(0, len(gaze_points)):
        x, y = gaze_points[i]
        prev_x, prev_y = current_fixation[-1]
        distance = ((x - prev_x) ** 2 + (y - prev_y) ** 2) ** 0.5

        if distance <= threshold:
            current_fixation.append((x, y))
        else:
            if len(current_fixation) > 1:  # Considering saccades only when there's more than one point
                fixations.extend(['Fixation'] * (len(current_fixation) - 1))
                fixations.append('Saccade')
            else:
                fixations.append('Saccade')
            current_fixation = [(x, y)]

    if len(current_fixation) > 1:
        fixations.extend(['Fixation'] * (len(current_fixation) - 1))
    else:
        fixations.append('Saccade')

    return fixations

def add_fixations_to_data(datas, threshold):
    for data in datas:
        fixations = fixation_algorithm(data[['x', 'y']].values, threshold=threshold)
        print(len(fixations), len(data))
        eye_movements = np.array(fixations)
        data[f'eye_movement_type_{threshold}'] = eye_movements.tolist()[:len(data)]

def get_filtered_data(data, start_time, end_time):
    return data[(data['timeSeconds'] >= start_time) & (data['timeSeconds'] <= end_time)]

"""Remoning NaN values, adding timeStamps as seconds, the time between points and the fixations"""

data1 = data1.dropna()
data2 = data2.dropna()
data3 = data3.dropna()
data4 = data4.dropna()
data5 = data5.dropna()

y_max = 1080

invert_y(data1, y_max)
invert_y(data2, y_max)
invert_y(data3, y_max)
invert_y(data4, y_max)
invert_y(data5, y_max)


add_time_seconds(data1)
add_time_seconds(data2)
add_time_seconds(data3)
add_time_seconds(data4)
add_time_seconds(data5)

add_time_between_points(data1)
add_time_between_points(data2)
add_time_between_points(data3)
add_time_between_points(data4)
add_time_between_points(data5)

# Adding fixations to data with thresholds 6 and 11. data5 is excluded because it caused error.

#add_fixations_to_data([data1, data2, data3, data4, data5], 6)
#add_fixations_to_data([data1, data2, data3, data4], 11)

add_fixations_to_data([data1, data2, data3, data4, data5], 6)
add_fixations_to_data([data1, data2, data3, data4, data5], 11)

data5

"""Visualizing the eye tracking data where X is the x value and Y is time in seconds"""

start_time = 0
end_time = 90

f_data1 = data1[(data1['timeSeconds'] >= start_time) & (data1['timeSeconds'] <= end_time)]
f_data2 = data2[(data2['timeSeconds'] >= start_time) & (data2['timeSeconds'] <= end_time)]
f_data3 = data3[(data3['timeSeconds'] >= start_time) & (data3['timeSeconds'] <= end_time)]
f_data4 = data4[(data4['timeSeconds'] >= start_time) & (data4['timeSeconds'] <= end_time)]
f_data5 = data5[(data5['timeSeconds'] >= start_time) & (data5['timeSeconds'] <= end_time)]

plt.scatter(f_data1['x'], f_data1['timeSeconds'], cmap='cool', label='1')
plt.scatter(f_data2['x'], f_data2['timeSeconds'], cmap='cool', label='2')
plt.scatter(f_data3['x'], f_data3['timeSeconds'], cmap='cool', label='3')
plt.scatter(f_data4['x'], f_data4['timeSeconds'], cmap='cool', label='4')
plt.scatter(f_data5['x'], f_data5['timeSeconds'], cmap='cool', label='5')
plt.colorbar()

plt.legend()

plt.xlabel('X')
plt.ylabel('Time')
plt.title('Eye Tracking Data')

plt.show()

def plot_x_time_data(start_time, end_time):
    f_data1 = get_filtered_data(data1, start_time, end_time)
    f_data2 = get_filtered_data(data2, start_time, end_time)
    f_data3 = get_filtered_data(data3, start_time, end_time)
    f_data4 = get_filtered_data(data4, start_time, end_time)
    f_data5 = get_filtered_data(data5, start_time, end_time)

    plt.scatter(f_data1['x'], f_data1['timeSeconds'], cmap='cool', label='1')
    plt.scatter(f_data2['x'], f_data2['timeSeconds'], cmap='cool', label='2')
    plt.scatter(f_data3['x'], f_data3['timeSeconds'], cmap='cool', label='3')
    plt.scatter(f_data4['x'], f_data4['timeSeconds'], cmap='cool', label='4')
    plt.scatter(f_data5['x'], f_data5['timeSeconds'], cmap='cool', label='5')
    plt.colorbar()

    plt.legend()

    plt.xlabel('X')
    plt.ylabel('Time')
    plt.title('Eye Tracking Data')

    plt.show()

"""Visualizing whether the participant looked in the left or right after picture was shown"""

plot_x_time_data(3, 20)
plot_x_time_data(20, 37)
plot_x_time_data(37, 55)
plot_x_time_data(55, 75)
plot_x_time_data(75, 90)

slide = 1

if slide == 1:
    start_time = 3
    end_time = 20
    img = mpimg.imread('slide1.jpg')

if slide == 2:
    start_time = 20
    end_time = 37
    img = mpimg.imread('slide2.jpg')

if slide == 3:
    start_time = 37
    end_time = 55
    img = mpimg.imread('slide3.jpg')

if slide == 4:
    start_time = 55
    end_time = 75
    img = mpimg.imread('slide4.jpg')

if slide == 5:
    start_time = 75
    end_time = 90
    img = mpimg.imread('slide5.jpg')


d1 = get_filtered_data(data1, start_time, end_time)
d2 = get_filtered_data(data2, start_time, end_time)
d3 = get_filtered_data(data3, start_time, end_time)
d4 = get_filtered_data(data4, start_time, end_time)
d5 = get_filtered_data(data5, start_time, end_time)



# 'none' to hide
fixation_color = 'green'
else_color = 'red'

plt.imshow(img, extent=[0, 1920, 0, 1080])
colors1 = [fixation_color if x == 'Fixation' else else_color for x in d1['eye_movement_type_11']]
colors2 = [fixation_color if x == 'Fixation' else else_color for x in d2['eye_movement_type_11']]
colors3 = [fixation_color if x == 'Fixation' else else_color for x in d3['eye_movement_type_11']]
colors4 = [fixation_color if x == 'Fixation' else else_color for x in d4['eye_movement_type_11']]
colors5 = [fixation_color if x == 'Fixation' else else_color for x in d5['eye_movement_type_11']]
plt.scatter(d1['x'], d1['y'], color=colors1, s=7)
plt.scatter(d2['x'], d2['y'], color=colors2, s=7)
plt.scatter(d3['x'], d3['y'], color=colors3, s=7)
plt.scatter(d4['x'], d4['y'], color=colors4, s=7)
plt.scatter(d5['x'], d5['y'], color=colors5, s=7)

slide = 1

if slide == 1:
    start_time = 3
    end_time = 20
    img = mpimg.imread('slide1.jpg')

if slide == 2:
    start_time = 20
    end_time = 37
    img = mpimg.imread('slide2.jpg')

if slide == 3:
    start_time = 37
    end_time = 55
    img = mpimg.imread('slide3.jpg')

if slide == 4:
    start_time = 55
    end_time = 75
    img = mpimg.imread('slide4.jpg')

if slide == 5:
    start_time = 75
    end_time = 90
    img = mpimg.imread('slide5.jpg')


d = get_filtered_data(data2, start_time, end_time)

print_data(d)


# 'none' to hide
fixation_color = 'green'
else_color = 'red'

plt.imshow(img, extent=[0, 1920, 0, 1080])
colors1 = [fixation_color if x == 'Fixation' else else_color for x in d['eye_movement_type_11']]

plt.plot(d['x'], d['y'], 'k-', linewidth=0.5)


plt.scatter(d['x'], d['y'], color=colors1, s=7)

f1 = data1.

df = data1
fixation_df = df[df['eye_movement_type_11'] == 'Fixation']

grouped_df = df.groupby('eye_movement_type_11')

start_time = grouped_df['timeSeconds'].min()
end_time = grouped_df['timeSeconds'].max()

new_df = pd.DataFrame({'start_time': start_time, 'end_time': end_time}).reset_index(drop=True)

fixation_df

start_time = 20
end_time = 37
d1 = get_filtered_data(data1, 20, 37)

#filtered_df = d1[d1['eye_movement_type_6'] == 'Fixation']
filtered_df = d1

threshold_up = 970
thresgold_down = 890
df_below_threshold = filtered_df[filtered_df['x'] < thresgold_down]
df_above_threshold = filtered_df[filtered_df['x'] >= threshold_up]

sum_below_threshold = df_below_threshold['time_between_points_seconds'].sum()
sum_above_threshold = df_above_threshold['time_between_points_seconds'].sum()

print("Sum of seconds nature:", sum_below_threshold)
print("Sum of seconds urban:", sum_above_threshold)

def print_data(data):
    filtered_df = data[data['eye_movement_type_11'] == 'Fixation']
    #filtered_df = data

    threshold_up = 970
    threshold_down = 890
    df_below_threshold = filtered_df[filtered_df['x'] < threshold_down ]
    df_above_threshold = filtered_df[filtered_df['x'] >= threshold_up ]

    sum_below_threshold = df_below_threshold['time_between_points_seconds'].sum()
    sum_above_threshold = df_above_threshold['time_between_points_seconds'].sum()
    print("Sum of seconds right threshold (URBAN):", sum_above_threshold)
    print("\nSum of seconds left threshold (NATURE):", sum_below_threshold)


def get_theshold_data(data):
    filtered_df = data[data['eye_movement_type_11'] == 'Fixation']
    #filtered_df = data

    threshold_up = 970
    threshold_down = 890
    df_below_threshold = filtered_df[filtered_df['x'] < threshold_down ]
    df_above_threshold = filtered_df[filtered_df['x'] >= threshold_up ]

    sum_below_threshold = df_below_threshold['time_between_points_seconds'].sum()
    sum_above_threshold = df_above_threshold['time_between_points_seconds'].sum()
    return sum_below_threshold, sum_above_threshold

start_time = 0
end_time = 1000

n = 0
u = 0

for d in [data1, data2, data3, data4, data5]:
    n1, u1 = get_theshold_data(d)
    n += n1
    u += u1

print(n, u)

data = {'urban':119.62980400000004/5, 'nature':54.91715099999987/5}
courses = list(data.keys())
values = list(data.values())

fig = plt.figure(figsize = (6, 5))

# creating the bar plot
plt.bar(courses, values, width = 0.8)

plt.xlabel("Picture type")
plt.ylabel("Average fixations duration (ms)")
plt.title("Average fixation")
plt.show()

"""Save data to new csv file"""

data1.to_csv('processed_Participant_01.csv', index=False)
data2.to_csv('processed_Participant_02.csv', index=False)
data3.to_csv('processed_Participant_03.csv', index=False)
data4.to_csv('processed_Participant_04.csv', index=False)
data5.to_csv('processed_Participant_05.csv', index=False)





start_time =
end_time = 37
d1 = get_filtered_data(data1, 20, 37)

#filtered_df = d1[d1['eye_movement_type_6'] == 'Fixation']
filtered_df = d1

threshold_up = 970
thresgold_down = 890
df_below_threshold = filtered_df[filtered_df['x'] < thresgold_down]
df_above_threshold = filtered_df[filtered_df['x'] >= threshold_up]

sum_below_threshold = df_below_threshold['time_between_points_seconds'].sum()
sum_above_threshold = df_above_threshold['time_between_points_seconds'].sum()

print("Sum of seconds nature:", sum_below_threshold)
print("Sum of seconds urban:", sum_above_threshold)











































